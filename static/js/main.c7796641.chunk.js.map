{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["scroller","scrollama","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","board","Map","myRef","current","canvasContext","getContext","fillStyle","fillRect","boardSize","forEach","row","rowIndex","grid","gridIndex","gridStatus","set","concat","value","key","gridColor","keyArr","split","parseInt","movesOptions","fitness","population","fittest1","selected","fitnessScore","fittest2","endGoal","individuals","startingPosition","fellOnMoving","i","length","get","join","landingPos","temp","Math","floor","random","breeding","fittestPair","fittestOffspring","willAddNewMove","randomGeneSelector","ceil","populationList","removeAStep","pop","mutation","mutationPercentage","generationPieces","ecosystem","fittestIndiv","returningGenerations","push","fittest","score","startEnvironment","indivOrganism","initializer","setState","componentDidUpdate","timer","setup","step","onStepEnter","response","startingPos","counter","window","setInterval","state","boardAnimation","index","console","log","onStepExit","clearInterval","addEventListener","resize","React","createRef","width","innerWidth","height","innerHeight","react_default","a","createElement","className","id","ref","toString","map","element","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c7796641.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport 'intersection-observer';\nimport scrollama from 'scrollama';\nimport './App.scss';\n\nconst scroller = scrollama();\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      generationPieces: [],\n      board: null\n    };\n    this.myRef = React.createRef();\n  }\n\n  componentDidMount = () => {\n    // setup resize event\n\n    let boardSize = 20;\n    let board = new Map();\n\n    let gameBridge = [\n      [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0],\n      [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0],\n      [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],\n      [0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0],\n      [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0],\n      [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0],\n      [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0],\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0]\n    ];\n\n    if (this.myRef.current === null) return;\n    let canvasContext = this.myRef.current.getContext('2d');\n    canvasContext.fillStyle = 'gray';\n    canvasContext.fillRect(20, 20, boardSize * 22 + 2, boardSize * 22 + 2);\n\n    gameBridge.forEach((row, rowIndex) => {\n      row.forEach((grid, gridIndex) => {\n        let gridStatus;\n        if (grid === 0) {\n          gridStatus = 'pit';\n        } else if (grid === 1) {\n          gridStatus = 'floor';\n        } else {\n          gridStatus = 'goal';\n        }\n        board.set(`${gridIndex},${rowIndex}`, gridStatus);\n      });\n    });\n\n    board.forEach((value, key) => {\n      let gridColor;\n      if (value === 'floor') {\n        gridColor = 'white';\n      } else if (value === 'pit') {\n        gridColor = 'black';\n      } else {\n        gridColor = 'yellow';\n      }\n      canvasContext.fillStyle = gridColor;\n      let keyArr = key.split(',');\n\n      canvasContext.fillRect(\n        22 * (parseInt(keyArr[0]) + 1),\n        22 * (parseInt(keyArr[1]) + 1),\n        20,\n        20\n      );\n      canvasContext.fillStyle = 'red';\n      canvasContext.fillRect(\n        22 * (parseInt(2) + 1),\n        22 * (parseInt(0) + 1),\n        20,\n        20\n      );\n    });\n\n    let movesOptions = ['D', 'R'];\n\n    const initializer = () => {\n      let populationList = [];\n\n      for (let i = 0; i < 40; i++) {\n        populationList[i] = [];\n      }\n\n      populationList.forEach(indivOrganism => {\n        for (let i = 0; i < 6; i++) {\n          indivOrganism[i] =\n            movesOptions[Math.floor(Math.random() * movesOptions.length)];\n        }\n      });\n      return populationList;\n    };\n\n    const fitness = population => {\n      let fittest1 = { selected: [], fitnessScore: 0 };\n      let fittest2 = { selected: [], fitnessScore: 0 };\n      let endGoal = [18, 19];\n      let totalDistance = 17 - 2 + 19;\n\n      population.forEach(individuals => {\n        let fitnessScore;\n        let startingPosition = [2, 0];\n        let fellOnMoving = false;\n\n        for (let i = 0; i < individuals.length; i++) {\n          if (individuals[i] === 'D' && startingPosition[1] !== 19) {\n            startingPosition[1] += 1;\n          } else if (individuals[i] === 'R' && startingPosition[0] !== 19) {\n            startingPosition[0] += 1;\n          }\n          let perMove = board.get(startingPosition.join(','));\n          if (perMove === 'pit') {\n            fellOnMoving = true;\n          }\n        }\n        let landingPos = board.get(startingPosition.join(','));\n\n        if (landingPos === 'pit' || fellOnMoving) {\n          fitnessScore = 0;\n        } else if (landingPos === 'floor' && !fellOnMoving) {\n          let distanceX = endGoal[0] - startingPosition[0];\n          let distanceY = endGoal[1] - startingPosition[1];\n          fitnessScore = totalDistance - (distanceX + distanceY);\n        } else if (landingPos === 'goal' && !fellOnMoving) {\n          let distanceX = endGoal[0] - startingPosition[0];\n          let distanceY = endGoal[1] - startingPosition[1];\n          fitnessScore = totalDistance - (distanceX + distanceY);\n        }\n\n        if (fitnessScore > fittest1.fitnessScore) {\n          let temp = fittest1.selected;\n          fittest1.selected = individuals;\n          fittest1.fitnessScore = fitnessScore;\n          fittest2.selected = temp;\n        } else if (\n          fitnessScore > fittest2.fitnessScore &&\n          fitnessScore <= fittest1.fitnessScore\n        ) {\n          fittest2.selected = individuals;\n          fittest2.fitnessScore = fitnessScore;\n        }\n      });\n      if (fittest1.fitnessScore === 0) {\n        fittest1.selected =\n          population[Math.floor(Math.random() * population.length)];\n      }\n      if (fittest2.fitnessScore === 0) {\n        fittest2.selected =\n          population[Math.floor(Math.random() * population.length)];\n      }\n\n      return [fittest1, fittest2];\n    };\n\n    const breeding = fittestPair => {\n      let fittest1 = fittestPair[0].selected;\n      let fittest2 = fittestPair[1].selected;\n      let fittestOffspring = [];\n      let willAddNewMove = false;\n      let randomGeneSelector = Math.ceil(\n        (Math.random() * fittestPair.length) / 2\n      );\n      for (\n        let i = randomGeneSelector;\n        i < randomGeneSelector + fittestPair.length / 2;\n        i++\n      ) {\n        fittestOffspring[i] = fittest1[i];\n      }\n      for (let i = 0; i < fittest2.length; i++) {\n        if (!fittestOffspring[i]) {\n          fittestOffspring[i] = fittest2[i];\n        }\n      }\n      if (\n        fittestPair[0].fitnessScore !== 0 &&\n        fittestPair[1].fitnessScore !== 0\n      ) {\n        willAddNewMove = true;\n      }\n\n      let populationList = [];\n      for (let i = 0; i < 40; i++) {\n        if (willAddNewMove) {\n          populationList[i] = [\n            ...fittestOffspring,\n            movesOptions[Math.floor(Math.random() * movesOptions.length)]\n          ];\n        } else {\n          let removeAStep = [...fittestOffspring];\n          removeAStep.pop();\n\n          populationList[i] = removeAStep;\n        }\n      }\n\n      return populationList;\n    };\n\n    const mutation = (mutationPercentage, populationList) => {\n      populationList.forEach(individuals => {\n        for (let i = 0; i < individuals.length; i++) {\n          let randomNumber = Math.random();\n          if (randomNumber <= mutationPercentage / 100) {\n            individuals[i] =\n              movesOptions[Math.floor(Math.random() * movesOptions.length)];\n          }\n        }\n      });\n      return populationList;\n    };\n\n    const startEnvironment = population => {\n      let ecosystem = population;\n      let generations = -1;\n      let fittestIndiv = [];\n      let startingPosition = [2, 0];\n      let endGoal = ['16,19', '17,19', '18,19'];\n      let landingPos = [];\n      let returningGenerations = [];\n      let fitnessScore = -1;\n\n      while (\n        landingPos.join(',') !== endGoal[0] &&\n        landingPos.join(',') !== endGoal[1] &&\n        landingPos.join(',') !== endGoal[2] &&\n        fitnessScore < 36\n      ) {\n        landingPos = [...startingPosition];\n\n        generations++;\n        fittestIndiv = fitness(ecosystem)[0];\n        for (let i = 0; i < fittestIndiv.selected.length; i++) {\n          if (fittestIndiv.selected[i] === 'D' && landingPos[1] !== 19) {\n            landingPos[1] += 1;\n          } else if (fittestIndiv.selected[i] === 'R' && landingPos[0] !== 19) {\n            landingPos[0] += 1;\n          }\n        }\n\n        fitnessScore = fittestIndiv.fitnessScore;\n        returningGenerations.push({\n          fittest: fittestIndiv.selected,\n          score: fittestIndiv.fitnessScore\n        });\n\n        ecosystem = mutation(5, breeding(fitness(ecosystem)));\n      }\n\n      return returningGenerations;\n    };\n\n    //   const boardAnimation = individuals => {\n    //     let startingPos = [2, 0];\n    //     let counter = 0;\n    //     let timer = window.setInterval(() => {\n    //       if (counter < individuals.length) {\n    //         if (individuals[counter] === 'D' && startingPos[1] !== 19) {\n    //           startingPos[1] += 1;\n    //         } else if (individuals[counter] === 'R' && startingPos[0] !== 19) {\n    //           startingPos[0] += 1;\n    //         }\n    //         board.forEach((value, key) => {\n    //           let gridColor;\n    //           if (value === 'floor') {\n    //             gridColor = 'white';\n    //           } else if (value === 'pit') {\n    //             gridColor = 'black';\n    //           } else {\n    //             gridColor = 'yellow';\n    //           }\n    //           canvasContext.fillStyle = gridColor;\n    //           let keyArr = key.split(',');\n\n    //           canvasContext.fillRect(\n    //             22 * (parseInt(keyArr[0]) + 1),\n    //             22 * (parseInt(keyArr[1]) + 1),\n    //             20,\n    //             20\n    //           );\n    //         });\n    //         canvasContext.fillStyle = 'red';\n    //         canvasContext.fillRect(\n    //           22 * (parseInt(startingPos[0]) + 1),\n    //           22 * (parseInt(startingPos[1]) + 1),\n    //           20,\n    //           20\n    //         );\n    //       }\n    //       counter++;\n    //     }, 500);\n\n    //     return timer;\n    //   };\n\n    //   const animateGeneration = movementArray => {\n    //     boardAnimation(movementArray[movementArray.length - 1].fittest);\n    //   };\n\n    let generationPieces = startEnvironment(initializer());\n    // animateGeneration(generationPieces);\n    this.setState({ generationPieces, board });\n  };\n\n  componentDidUpdate = () => {\n    let timer;\n    let canvasContext = this.myRef.current.getContext('2d');\n    const boardAnimation = individuals => {\n      let startingPos = [2, 0];\n      let counter = 0;\n      let timer = window.setInterval(() => {\n        if (counter < individuals.length) {\n          if (individuals[counter] === 'D' && startingPos[1] !== 19) {\n            startingPos[1] += 1;\n          } else if (individuals[counter] === 'R' && startingPos[0] !== 19) {\n            startingPos[0] += 1;\n          }\n          canvasContext.fillStyle = 'red';\n          canvasContext.fillRect(\n            22 * (parseInt(2) + 1),\n            22 * (parseInt(0) + 1),\n            20,\n            20\n          );\n          this.state.board.forEach((value, key) => {\n            let gridColor;\n            let keyArr = key.split(',');\n            if (value === 'floor' && key) {\n              gridColor = 'white';\n            } else if (value === 'pit') {\n              gridColor = 'black';\n            } else {\n              gridColor = 'yellow';\n            }\n\n            canvasContext.fillStyle = gridColor;\n\n            canvasContext.fillRect(\n              22 * (parseInt(keyArr[0]) + 1),\n              22 * (parseInt(keyArr[1]) + 1),\n              20,\n              20\n            );\n          });\n          canvasContext.fillStyle = 'red';\n          canvasContext.fillRect(\n            22 * (parseInt(startingPos[0]) + 1),\n            22 * (parseInt(startingPos[1]) + 1),\n            20,\n            20\n          );\n        }\n        counter++;\n      }, 500);\n\n      return timer;\n    };\n    scroller\n      .setup({\n        step: '.step'\n      })\n      .onStepEnter(response => {\n        // { element, index, direction }\n\n        timer = boardAnimation(\n          this.state.generationPieces[response.index].fittest\n        );\n        console.log(response.index);\n      })\n      .onStepExit(() => {\n        // { element, index, direction }\n        window.clearInterval(timer);\n      });\n    window.addEventListener('resize', scroller.resize);\n  };\n\n  render() {\n    let width = window.innerWidth;\n    let height = window.innerHeight;\n    return (\n      <div className=\"App\">\n        <canvas\n          id=\"maze-genetics\"\n          ref={this.myRef}\n          width={width.toString()}\n          height={height.toString()}\n        />\n        <div className=\"scroll__text\">\n          {this.state.generationPieces.map((element, index) => {\n            return (\n              <div className=\"step\" key={index}>\n                <h1>Generation: {index}</h1>\n                <h2>Fitness Score: {element.score}</h2>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}